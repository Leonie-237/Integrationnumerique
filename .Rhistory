if (n == 2) {
x <- c(-0.5773502692, 0.5773502692)
w <- c(1.0, 1.0)
} else if (n == 3) {
x <- c(-0.7745966692, 0.0, 0.7745966692)
w <- c(0.5555555556, 0.8888888889, 0.5555555556)
} else if (n == 4) {
x <- c(-0.8611363116, -0.3399810436, 0.3399810436, 0.8611363116)
w <- c(0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451)
} else if (n == 5) {
x <- c(-0.9061798459, -0.5384693101, 0.0, 0.5384693101, 0.9061798459)
w <- c(0.2369268851, 0.4786286705, 0.5688888889, 0.4786286705, 0.2369268851)
} else {
stop("Order n must be 2, 3, 4, or 5")
}
return(list(x = x, w = w))
}
# Function for Gauss-Legendre integration for a given order
#' Title Numerical Integration using the Gauss-Legendre Method
#'
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) exp(-x^2)
#' resultat <- integrationgauss(f, -1, 1, 5)
integrationgauss <- function(f, a, b, n) {
# Obtain the nodes and weights for the given order n
gauss <- gaussLegendreNodesWeights(n)
x <- gauss$x
w <- gauss$w
# Initialize the integral
integral <- 0
# Calculate the integral using the Gauss-Legendre nodes and weights
for (i in 1:n) {
integral <- integral + w[i] * f(((b - a) * x[i] + b + a) / 2)
}
# Final adjustment for the interval [a, b]
integral <- (b - a) / 2 * integral
return(integral)
}
# Define the parameters
k <- 0.5  # Conductivity in W/m·K
L <- 0.1  # Length of the wall in meters
T1 <- 350  # Temperature at x=0 in Kelvin
T2 <- 300  # Temperature at x=L in Kelvin
# Define the temperature function T(x)
T <- function(x) T1 + ((T2 - T1) / L) * x
# Define the derivative function dT/dx
dTdx <- function(x) (T2 - T1) / L
# Number of subdivisions
n <- 10
# Calculate the heat flux using different integration methods
heat_flux_trapeze <- -k * integrationtrapeze(dTdx, 0, L, n)
heat_flux_gauss <- -k * integrationgauss(dTdx, 0, L, 5)
# Print the results
cat("Heat flux using Trapezoidal Rule:", heat_flux_trapeze, "W\n")
cat("Heat flux using Gauss-Legendre Method:", heat_flux_gauss, "W\n")
devtools::check()
devtools::document()
rm(list = c("integrationboole", "integrationgauss",
"integrationsimpson", "integrationtrapeze"))
devtools::document()
rm(list = ls())
devtools::document()
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions
#' @return value of the integral
#' @export
#'
#' @examples
#' f <- function(x) 3*(x^3)
#' integrationtrapeze(f,0,1,10)
integrationtrapeze<-function(f,a,b,n){
# Calculate the width of the subintervals
largdesousinter<-(b-a)/n
# Sum the function values at the points in the interval
somdesval<-(f(a)+f(b))/2
for (i in 1:(n-1)) {
somdesval<-somdesval+f(a+i*largdesousinter)
}
# Calculate the integral by multiplying the sum of values by the width of the subintervals
return(largdesousinter*somdesval)
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions (must be even)
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) sin(x)
#' integrationsimpson(f,0,pi,32)
integrationsimpson <- function(f, a, b, n) {
# Check if n is even
if (n %% 2 != 0) stop("n doit etre pair")
# Calculate the width of the subdivisions
largdessubd <- (b - a) / n
# Division points
ptsdediv <- seq(a, b, length.out = n + 1)
y <- f(ptsdediv)
# Calculate the integral using Simpsons rule
integral <- largdessubd / 3 * (y[1] + y[n + 1] + 4 * sum(y[seq(2, n, by = 2)]) + 2 * sum(y[seq(3, n - 1, by = 2)]))
return(integral)
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) x^2 * sin(x)
#' resultat <- integrationboole(f, 0, pi, 16)
integrationboole <- function(f, a, b, n) {
# Check if n is a multiple of 4
if (n %% 4 != 0) stop("n doit etre multiple de 4")
# Calculate the width of the subintervals
h <- (b - a) / n
# Sequence of division points
x <- seq(a, b, by = h)
# Evaluate the function at the division points
y <- f(x)
# Calculate the integral using Booles rule
integral <- 2 * h / 45 * (7 * sum(y[c(1, n + 1)]) + 32 * sum(y[seq(2, n, by = 2)]) + 12 * sum(y[seq(3, n - 1, by = 4)]) + 14 * sum(y[seq(5, n - 3, by = 4)]))
return(integral)
}
#Numerical integration using the Gauss-Legendre method
#Function to obtain the Gauss-Legendre nodes and weights for a given order
gaussLegendreNodesWeights <- function(n) {
# x represents the vector of abscissas of the Gauss points (nodes) on the interval [-1,1]
# w represents the vector of weights associated with each node x
if (n == 2) {
x <- c(-0.5773502692, 0.5773502692)
w <- c(1.0, 1.0)
} else if (n == 3) {
x <- c(-0.7745966692, 0.0, 0.7745966692)
w <- c(0.5555555556, 0.8888888889, 0.5555555556)
} else if (n == 4) {
x <- c(-0.8611363116, -0.3399810436, 0.3399810436, 0.8611363116)
w <- c(0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451)
} else if (n == 5) {
x <- c(-0.9061798459, -0.5384693101, 0.0, 0.5384693101, 0.9061798459)
w <- c(0.2369268851, 0.4786286705, 0.5688888889, 0.4786286705, 0.2369268851)
} else {
stop("Order n must be 2, 3, 4, or 5")
}
return(list(x = x, w = w))
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) exp(-x^2)
#' resultat <- integrationgauss(f, -1, 1, 5)
integrationgauss <- function(f, a, b, n) {
# Obtain the nodes and weights for the given order n
gauss <- gaussLegendreNodesWeights(n)
x <- gauss$x
w <- gauss$w
# Initialize the integral
integral <- 0
# Calculate the integral using the Gauss-Legendre nodes and weights
for (i in 1:n) {
integral <- integral + w[i] * f(((b - a) * x[i] + b + a) / 2)
}
# Final adjustment for the interval [a, b]
integral <- (b - a) / 2 * integral
return(integral)
}
# Define the parameters
k <- 0.5  # Conductivity in W/m·K
L <- 0.1  # Length of the wall in meters
T1 <- 350  # Temperature at x=0 in Kelvin
T2 <- 300  # Temperature at x=L in Kelvin
# Define the temperature function T(x)
T <- function(x) T1 + ((T2 - T1) / L) * x
# Define the derivative function dT/dx
dTdx <- function(x) (T2 - T1) / L
# Number of subdivisions
n <- 10
# Calculate the heat flux using different integration methods
heat_flux_trapeze <- (-k * integrationtrapeze(dTdx, 0, L, n))
heat_flux_gauss <- -k * integrationgauss(dTdx, 0, L, 5)
# Print the results
cat("Heat flux using Trapezoidal Rule:", heat_flux_trapeze, "W\n")
cat("Heat flux using Gauss-Legendre Method:", heat_flux_gauss, "W\n")
devtools::check()
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
rm(list=ls())
devtools::document()
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions
#' @return value of the integral
#' @export
#'
#' @examples
#' f <- function(x) 3*(x^3)
#' integrationtrapeze(f,0,1,10)
integrationtrapeze<-function(f,a,b,n){
# Calculate the width of the subintervals
largdesousinter<-(b-a)/n
# Sum the function values at the points in the interval
somdesval<-(f(a)+f(b))/2
for (i in 1:(n-1)) {
somdesval<-somdesval+f(a+i*largdesousinter)
}
# Calculate the integral by multiplying the sum of values by the width of the subintervals
return(largdesousinter*somdesval)
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions (must be even)
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) sin(x)
#' integrationsimpson(f,0,pi,32)
integrationsimpson <- function(f, a, b, n) {
# Check if n is even
if (n %% 2 != 0) stop("n doit etre pair")
# Calculate the width of the subdivisions
largdessubd <- (b - a) / n
# Division points
ptsdediv <- seq(a, b, length.out = n + 1)
y <- f(ptsdediv)
# Calculate the integral using Simpsons rule
integral <- largdessubd / 3 * (y[1] + y[n + 1] + 4 * sum(y[seq(2, n, by = 2)]) + 2 * sum(y[seq(3, n - 1, by = 2)]))
return(integral)
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) x^2 * sin(x)
#' resultat <- integrationboole(f, 0, pi, 16)
integrationboole <- function(f, a, b, n) {
# Check if n is a multiple of 4
if (n %% 4 != 0) stop("n doit etre multiple de 4")
# Calculate the width of the subintervals
h <- (b - a) / n
# Sequence of division points
x <- seq(a, b, by = h)
# Evaluate the function at the division points
y <- f(x)
# Calculate the integral using Booles rule
integral <- 2 * h / 45 * (7 * sum(y[c(1, n + 1)]) + 32 * sum(y[seq(2, n, by = 2)]) + 12 * sum(y[seq(3, n - 1, by = 4)]) + 14 * sum(y[seq(5, n - 3, by = 4)]))
return(integral)
}
#Numerical integration using the Gauss-Legendre method
#Function to obtain the Gauss-Legendre nodes and weights for a given order
gaussLegendreNodesWeights <- function(n) {
# x represents the vector of abscissas of the Gauss points (nodes) on the interval [-1,1]
# w represents the vector of weights associated with each node x
if (n == 2) {
x <- c(-0.5773502692, 0.5773502692)
w <- c(1.0, 1.0)
} else if (n == 3) {
x <- c(-0.7745966692, 0.0, 0.7745966692)
w <- c(0.5555555556, 0.8888888889, 0.5555555556)
} else if (n == 4) {
x <- c(-0.8611363116, -0.3399810436, 0.3399810436, 0.8611363116)
w <- c(0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451)
} else if (n == 5) {
x <- c(-0.9061798459, -0.5384693101, 0.0, 0.5384693101, 0.9061798459)
w <- c(0.2369268851, 0.4786286705, 0.5688888889, 0.4786286705, 0.2369268851)
} else {
stop("Order n must be 2, 3, 4, or 5")
}
return(list(x = x, w = w))
}
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) exp(-x^2)
#' resultat <- integrationgauss(f, -1, 1, 5)
integrationgauss <- function(f, a, b, n) {
# Obtain the nodes and weights for the given order n
gauss <- gaussLegendreNodesWeights(n)
x <- gauss$x
w <- gauss$w
# Initialize the integral
integral <- 0
# Calculate the integral using the Gauss-Legendre nodes and weights
for (i in 1:n) {
integral <- integral + w[i] * f(((b - a) * x[i] + b + a) / 2)
}
# Final adjustment for the interval [a, b]
integral <- (b - a) / 2 * integral
return(integral)
}
devtools::document()
rm(list = c("integrationboole", "integrationgauss", "integrationsimpson",
"integrationtrapeze")
)
devtools::document()
# Numerical integration using the trapezoidal rule
#' Title Numerical Integration using the Trapezoidal Rule
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions
#' @return value of the integral
#' @export
#'
#' @examples
#' f <- function(x) 3*(x^3)
#' integrationtrapeze(f,0,1,10)
integrationtrapeze<-function(f,a,b,n){
# Calculate the width of the subintervals
largdesousinter<-(b-a)/n
# Sum the function values at the points in the interval
somdesval<-(f(a)+f(b))/2
for (i in 1:(n-1)) {
somdesval<-somdesval+f(a+i*largdesousinter)
}
# Calculate the integral by multiplying the sum of values by the width of the subintervals
return(largdesousinter*somdesval)
}
#Numerical integration using Simpsons rule
#' Title Numerical Integration using Simpsons Rule
#'
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n number of subdivisions (must be even)
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) sin(x)
#' integrationsimpson(f,0,pi,32)
integrationsimpson <- function(f, a, b, n) {
# Check if n is even
if (n %% 2 != 0) stop("n doit etre pair")
# Calculate the width of the subdivisions
largdessubd <- (b - a) / n
# Division points
ptsdediv <- seq(a, b, length.out = n + 1)
y <- f(ptsdediv)
# Calculate the integral using Simpsons rule
integral <- largdessubd / 3 * (y[1] + y[n + 1] + 4 * sum(y[seq(2, n, by = 2)]) + 2 * sum(y[seq(3, n - 1, by = 2)]))
return(integral)
}
#Integration numerique par la methode de Boole
#' Title Integration numerique par la methode de Boole
#'
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) x^2 * sin(x)
#' resultat <- integrationboole(f, 0, pi, 16)
integrationboole <- function(f, a, b, n) {
# Check if n is a multiple of 4
if (n %% 4 != 0) stop("n doit etre multiple de 4")
# Calculate the width of the subintervals
h <- (b - a) / n
# Sequence of division points
x <- seq(a, b, by = h)
# Evaluate the function at the division points
y <- f(x)
# Calculate the integral using Booles rule
integral <- 2 * h / 45 * (7 * sum(y[c(1, n + 1)]) + 32 * sum(y[seq(2, n, by = 2)]) + 12 * sum(y[seq(3, n - 1, by = 4)]) + 14 * sum(y[seq(5, n - 3, by = 4)]))
return(integral)
}
#Numerical integration using the Gauss-Legendre method
#Function to obtain the Gauss-Legendre nodes and weights for a given order
gaussLegendreNodesWeights <- function(n) {
# x represents the vector of abscissas of the Gauss points (nodes) on the interval [-1,1]
# w represents the vector of weights associated with each node x
if (n == 2) {
x <- c(-0.5773502692, 0.5773502692)
w <- c(1.0, 1.0)
} else if (n == 3) {
x <- c(-0.7745966692, 0.0, 0.7745966692)
w <- c(0.5555555556, 0.8888888889, 0.5555555556)
} else if (n == 4) {
x <- c(-0.8611363116, -0.3399810436, 0.3399810436, 0.8611363116)
w <- c(0.3478548451, 0.6521451549, 0.6521451549, 0.3478548451)
} else if (n == 5) {
x <- c(-0.9061798459, -0.5384693101, 0.0, 0.5384693101, 0.9061798459)
w <- c(0.2369268851, 0.4786286705, 0.5688888889, 0.4786286705, 0.2369268851)
} else {
stop("Order n must be 2, 3, 4, or 5")
}
return(list(x = x, w = w))
}
# Function for Gauss-Legendre integration for a given order
#' Title Numerical Integration using the Gauss-Legendre Method
#'
#' @param f function to integrate
#' @param a lower bound of integration
#' @param b upper bound of integration
#' @param n  number of subdivisions
#'
#' @return The approximate value of the integral
#' @export
#'
#' @examples
#' f <- function(x) exp(-x^2)
#' resultat <- integrationgauss(f, -1, 1, 5)
integrationgauss <- function(f, a, b, n) {
# Obtain the nodes and weights for the given order n
gauss <- gaussLegendreNodesWeights(n)
x <- gauss$x
w <- gauss$w
# Initialize the integral
integral <- 0
# Calculate the integral using the Gauss-Legendre nodes and weights
for (i in 1:n) {
integral <- integral + w[i] * f(((b - a) * x[i] + b + a) / 2)
}
# Final adjustment for the interval [a, b]
integral <- (b - a) / 2 * integral
return(integral)
}
# Define the function to integrate
f <- function(x) exp(-x^2)
# Integration bounds
a <- 0
b <- 1
# Number of subdivisions
n <- 10
# Calculate integrals using different methods
integral_trapeze <- integrationtrapeze(f, a, b, n)
integral_simpson <- integrationsimpson(f, a, b, n)
# Boole's method requires n to be a multiple of 4
n_boole <- 12  # Adjust n to be multiple of 4
integral_boole <- integrationboole(f, a, b, n_boole)
integral_gauss <- integrationgauss(f, a, b, 5)
# Print the results
cat("Integral using Trapezoidal Rule:", integral_trapeze, "\n")
cat("Integral using Simpson's Rule:", integral_simpson, "\n")
cat("Integral using Boole's Rule:", integral_boole, "\n")
cat("Integral using Gauss-Legendre Method:", integral_gauss, "\n")
# Probleme : Calcul du Transfert de Chaleur
# Contexte
# Nous avons une paroi plane homogene de materiau isolant avec une conductivite thermique constante k.
# La temperature a l'interieur de la paroi varie le long de son epaisseur en reponse a une difference
# de temperature entre les deux surfaces. Nous voulons calculer le flux de chaleur qui traverse cette paroi.
# Modele Mathematique
# Le flux de chaleur q a travers une paroi plane est donne par la loi de Fourier pour la conduction thermique :
# q = -k * dT/dx
# ou :
# k est la conductivite thermique du materiau (W/m·K)
# T est la temperature (K)
# x est la position a travers l'epaisseur de la paroi (m)
# Pour une paroi de longueur L avec une temperature T1 d'un cote et T2 de l'autre,
# nous devons integrer la temperature pour determiner le gradient de temperature a chaque point de la paroi
# et en deduire le flux thermique global.
# Etapes
# 1. Definir les parametres du probleme :
#    - Longueur de la paroi L
#    - Temperatures T1 et T2
#    - Conductivite thermique k
# 2. Formuler le gradient de temperature :
#    - Si la temperature varie lineairement entre T1 et T2, nous pouvons approximativement modeliser
#      la temperature le long de x comme :
#      T(x) = T1 + ((T2 - T1) / L) * x
# 3. Calculer l'integrale :
#    - Integrer la temperature T(x) pour trouver le flux thermique total.
# Define the parameters
k <- 0.5  # Conductivity in W/m·K
L <- 0.1  # Length of the wall in meters
T1 <- 350  # Temperature at x=0 in Kelvin
T2 <- 300  # Temperature at x=L in Kelvin
# Define the temperature function T(x)
T <- function(x) T1 + ((T2 - T1) / L) * x
# Define the derivative function dT/dx
dTdx <- function(x) (T2 - T1) / L
# Number of subdivisions
n <- 10
# Calculate the heat flux using different integration methods
heat_flux_trapeze <- (-k * integrationtrapeze(dTdx, 0, L, n))
heat_flux_gauss <- -k * integrationgauss(dTdx, 0, L, 5)
# Print the results
cat("Heat flux using Trapezoidal Rule:", heat_flux_trapeze, "W\n")
cat("Heat flux using Gauss-Legendre Method:", heat_flux_gauss, "W\n")
